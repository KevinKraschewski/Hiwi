classdef Activation < muscle.AModelConfig
    % Tests the force generated by an isometrically fixed muscle
    % 
    % Fix both sides and activate to several max pressure values x[MPa].
    % Should give a overall force of x[N] on both sides.
    %
    % Version two has a multi-element grid and 2mm^2 area, thus we expect
    % double the forces.
    
    methods
        function this = Activation(version)
            if nargin < 1 
                version = 1;
            end
            % Creates a Debug simple muscle model configuration.
            this = this@muscle.AModelConfig;
            this.addOption('Version',version);
            this.init;
            
            % Use classical FL function with fl(1)=1
            this.Options.FL = 3;
        end
        
        function configureModel(this, m)
            configureModel@muscle.AModelConfig(this, m);
%             sys = m.System;
            %f = sys.f;
            m.T = 15;
            m.dt = 1;
            % Activate over 50ms
            m.DefaultMu(2) = 10;
            m.ODESolver.RelTol = 1e-10;
            m.ODESolver.AbsTol = 1e-10;
        end
    end
    
    methods(Access=protected)
        
        function geo = getGeometry(this)
            % Single cube with same config as reference element
            [pts, cubes] = geometry.Cube8Node.DemoGrid([0 2],[0 1],[0 1]);
            if this.Options.Version == 2
                [pts, cubes] = geometry.Cube8Node.DemoGrid([0:.5:1],[0:1:2],[0:.5:1]);
            end
            geo = geometry.Cube8Node(pts, cubes);
            geo = geo.toCube27Node;
        end
        
        function displ_dir = setPositionDirichletBC(this, displ_dir)
            geo = this.PosFE.Geometry;
            % Always fix back side
            switch this.Options.Version
                case 1
                    displ_dir(:,geo.Elements(1,geo.MasterFaces(1:2,:))) = true;
                case 2
                    displ_dir(:,geo.Elements(1:4,geo.MasterFaces(1,:))) = true;
                    displ_dir(:,geo.Elements(5:8,geo.MasterFaces(2,:))) = true;
%                 otherwise
%                     displ_dir(:,geo.Elements(1,geo.MasterFaces(1,:))) = true;
                    %displ_dir(:,geo.Elements(1:4,geo.MasterFaces(1,:))) = true;
            end
        end
        
        function anull = seta0(this, anull)
            anull(1,:,:) = 1;
        end
    end
    
    methods(Static)
        function res = test_Activation
            % Version 2 has 2mm^2 area,so double force is expected!
            for version = 1:2
                a = tests.Activation(version);
                m = a.createModel;
                if version == 1
                    f1 = m.getPositionDirichletBCFaceIdx(1,1);
                    f2 = m.getPositionDirichletBCFaceIdx(1,2);
                    m.setGaussIntegrationRule(4);
                else
                    f1 = m.getPositionDirichletBCFaceIdx(1:4,1);
                    f2 = m.getPositionDirichletBCFaceIdx(5:8,2);
                end
                
                mu = m.DefaultMu;
                maxp = [1 rand(1,5)*10];
                res = true;
                for k=1:length(maxp)
                   mu(13) = maxp(k); 
                   [t,y] = m.simulate(mu);
                   pdf = m.getResidualForces(t,y);
                   % Check overall zero force
                   %max(abs(sum(pdf)))
                   res = res && all(abs(sum(pdf)) < 1e-8);

                   force_l = sum(pdf(f1,end),1);
                   force_r = sum(pdf(f2,end),1);
                   fprintf('P_{max}=%g => Force left %gN, right %gN\n',...
                       maxp(k),force_l,force_r);
                   %norm(maxp(k)-force_l)
                   res = res && norm(version*maxp(k)-force_l) < 1e-8;
                end
            end
        end        
    end
    
end

