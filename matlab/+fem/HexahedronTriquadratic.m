classdef HexahedronTriquadratic < fem.BaseFEM
    % Triquatratic: Quadratic ansatz functions on cube with 20 nodes per
    % cube
    %
    
    methods
        function this = HexahedronTriquadratic(geo)
            if nargin < 1
                geo = geometry.Cube27Node;
            end
            this = this@fem.BaseFEM(geo);
        end
   
        function Nx = N(~, x)
            % Triquadratic basis functions
            %
            Nx = [((x(1,:)-1).*x(1,:) .* (x(2,:)-1).*x(2,:) .* (x(3,:)-1).*x(3,:))/8; ... %1
                ((1-x(1,:).^2) .* (x(2,:)-1).*x(2,:) .* (x(3,:)-1).*x(3,:))/4; ... %2
                ((1+x(1,:)).*x(1,:) .* (x(2,:)-1).*x(2,:) .* (x(3,:)-1).*x(3,:))/8; ... %3
                ((x(1,:)-1).*x(1,:) .* (1-x(2,:).^2) .* (x(3,:)-1).*x(3,:))/4; ... %4
                ((1-x(1,:).^2) .* (1-x(2,:).^2) .* (x(3,:)-1).*x(3,:))/2; ... %5
                ((1+x(1,:)).*x(1,:) .* (1-x(2,:).^2) .* (x(3,:)-1).*x(3,:))/4; ... %6
                ((x(1,:)-1).*x(1,:) .* (1+x(2,:)).*x(2,:) .* (x(3,:)-1).*x(3,:))/8; ... %7
                ((1-x(1,:).^2) .* (1+x(2,:)).*x(2,:) .* (x(3,:)-1).*x(3,:))/4; ... %8
                ((1+x(1,:)).*x(1,:) .* (1+x(2,:)).*x(2,:) .* (x(3,:)-1).*x(3,:))/8; ... %9
                ((x(1,:)-1).*x(1,:) .* (x(2,:)-1).*x(2,:) .* (1-x(3,:).^2))/4; ... %10
                ((1-x(1,:).^2) .* (x(2,:)-1).*x(2,:) .* (1-x(3,:).^2))/2; ... %11
                ((1+x(1,:)).*x(1,:) .* (x(2,:)-1).*x(2,:) .* (1-x(3,:).^2))/4; ... %12
                ((x(1,:)-1).*x(1,:) .* (1-x(2,:).^2) .* (1-x(3,:).^2))/2; ... %13
                ((1-x(1,:).^2) .* (1-x(2,:).^2) .* (1-x(3,:).^2))/1; ... %14
                ((1+x(1,:)).*x(1,:) .* (1-x(2,:).^2) .* (1-x(3,:).^2))/2; ... %15
                ((x(1,:)-1).*x(1,:) .* (1+x(2,:)).*x(2,:) .* (1-x(3,:).^2))/4; ... %16
                ((1-x(1,:).^2) .* (1+x(2,:)).*x(2,:) .* (1-x(3,:).^2))/2; ... %17
                ((1+x(1,:)).*x(1,:) .* (1+x(2,:)).*x(2,:) .* (1-x(3,:).^2))/4; ... %18
                ((x(1,:)-1).*x(1,:) .* (x(2,:)-1).*x(2,:) .* (1+x(3,:)).*x(3,:))/8; ... %19
                ((1-x(1,:).^2) .* (x(2,:)-1).*x(2,:) .* (1+x(3,:)).*x(3,:))/4; ... %20
                ((1+x(1,:)).*x(1,:) .* (x(2,:)-1).*x(2,:) .* (1+x(3,:)).*x(3,:))/8; ... %21
                ((x(1,:)-1).*x(1,:) .* (1-x(2,:).^2) .* (1+x(3,:)).*x(3,:))/4; ... %22
                ((1-x(1,:).^2) .* (1-x(2,:).^2) .* (1+x(3,:)).*x(3,:))/2; ... %23
                ((1+x(1,:)).*x(1,:) .* (1-x(2,:).^2) .* (1+x(3,:)).*x(3,:))/4; ... %24
                ((x(1,:)-1).*x(1,:) .* (1+x(2,:)).*x(2,:) .* (1+x(3,:)).*x(3,:))/8; ... %25
                ((1-x(1,:).^2) .* (1+x(2,:)).*x(2,:) .* (1+x(3,:)).*x(3,:))/4; ... %26
                ((1+x(1,:)).*x(1,:) .* (1+x(2,:)).*x(2,:) .* (1+x(3,:)).*x(3,:))/8]; %27;
        end

        function dNx = gradN(~, x)
            dNx = [[((2*x(1,:)-1).*(x(2,:)-1).*x(2,:).*(x(3,:)-1).*x(3,:)) ((x(1,:)-1).*x(1,:).*(2*x(2,:)-1).*(x(3,:)-1).*x(3,:)) ((x(1,:)-1).*x(1,:).*(x(2,:)-1).*x(2,:).*(2*x(3,:)-1))]/8; ...
                [((-2*x(1,:)).*(x(2,:)-1).*x(2,:).*(x(3,:)-1).*x(3,:)) ((1-x(1,:).^2).*(2*x(2,:)-1).*(x(3,:)-1).*x(3,:)) ((1-x(1,:).^2).*(x(2,:)-1).*x(2,:).*(2*x(3,:)-1))]/4; ...
                [((1+2*x(1,:)).*(x(2,:)-1).*x(2,:).*(x(3,:)-1).*x(3,:)) ((1+x(1,:)).*x(1,:).*(2*x(2,:)-1).*(x(3,:)-1).*x(3,:)) ((1+x(1,:)).*x(1,:).*(x(2,:)-1).*x(2,:).*(2*x(3,:)-1))]/8; ...
                [((2*x(1,:)-1).*(1-x(2,:).^2).*(x(3,:)-1).*x(3,:)) ((x(1,:)-1).*x(1,:).*(-2*x(2,:)).*(x(3,:)-1).*x(3,:)) ((x(1,:)-1).*x(1,:).*(1-x(2,:).^2).*(2*x(3,:)-1))]/4; ...
                [((-2*x(1,:)).*(1-x(2,:).^2).*(x(3,:)-1).*x(3,:)) ((1-x(1,:).^2).*(-2*x(2,:)).*(x(3,:)-1).*x(3,:)) ((1-x(1,:).^2).*(1-x(2,:).^2).*(2*x(3,:)-1))]/2; ...
                [((1+2*x(1,:)).*(1-x(2,:).^2).*(x(3,:)-1).*x(3,:)) ((1+x(1,:)).*x(1,:).*(-2*x(2,:)).*(x(3,:)-1).*x(3,:)) ((1+x(1,:)).*x(1,:).*(1-x(2,:).^2).*(2*x(3,:)-1))]/4; ...
                [((2*x(1,:)-1).*(1+x(2,:)).*x(2,:).*(x(3,:)-1).*x(3,:)) ((x(1,:)-1).*x(1,:).*(1+2*x(2,:)).*(x(3,:)-1).*x(3,:)) ((x(1,:)-1).*x(1,:).*(1+x(2,:)).*x(2,:).*(2*x(3,:)-1))]/8; ...
                [((-2*x(1,:)).*(1+x(2,:)).*x(2,:).*(x(3,:)-1).*x(3,:)) ((1-x(1,:).^2).*(1+2*x(2,:)).*(x(3,:)-1).*x(3,:)) ((1-x(1,:).^2).*(1+x(2,:)).*x(2,:).*(2*x(3,:)-1))]/4; ...
                [((1+2*x(1,:)).*(1+x(2,:)).*x(2,:).*(x(3,:)-1).*x(3,:)) ((1+x(1,:)).*x(1,:).*(1+2*x(2,:)).*(x(3,:)-1).*x(3,:)) ((1+x(1,:)).*x(1,:).*(1+x(2,:)).*x(2,:).*(2*x(3,:)-1))]/8; ...
                [((2*x(1,:)-1).*(x(2,:)-1).*x(2,:).*(1-x(3,:).^2)) ((x(1,:)-1).*x(1,:).*(2*x(2,:)-1).*(1-x(3,:).^2)) ((x(1,:)-1).*x(1,:).*(x(2,:)-1).*x(2,:).*(-2*x(3,:)))]/4; ...
                [((-2*x(1,:)).*(x(2,:)-1).*x(2,:).*(1-x(3,:).^2)) ((1-x(1,:).^2).*(2*x(2,:)-1).*(1-x(3,:).^2)) ((1-x(1,:).^2).*(x(2,:)-1).*x(2,:).*(-2*x(3,:)))]/2; ...
                [((1+2*x(1,:)).*(x(2,:)-1).*x(2,:).*(1-x(3,:).^2)) ((1+x(1,:)).*x(1,:).*(2*x(2,:)-1).*(1-x(3,:).^2)) ((1+x(1,:)).*x(1,:).*(x(2,:)-1).*x(2,:).*(-2*x(3,:)))]/4; ...
                [((2*x(1,:)-1).*(1-x(2,:).^2).*(1-x(3,:).^2)) ((x(1,:)-1).*x(1,:).*(-2*x(2,:)).*(1-x(3,:).^2)) ((x(1,:)-1).*x(1,:).*(1-x(2,:).^2).*(-2*x(3,:)))]/2; ...
                [((-2*x(1,:)).*(1-x(2,:).^2).*(1-x(3,:).^2)) ((1-x(1,:).^2).*(-2*x(2,:)).*(1-x(3,:).^2)) ((1-x(1,:).^2).*(1-x(2,:).^2).*(-2*x(3,:)))]/1; ...
                [((1+2*x(1,:)).*(1-x(2,:).^2).*(1-x(3,:).^2)) ((1+x(1,:)).*x(1,:).*(-2*x(2,:)).*(1-x(3,:).^2)) ((1+x(1,:)).*x(1,:).*(1-x(2,:).^2).*(-2*x(3,:)))]/2; ...
                [((2*x(1,:)-1).*(1+x(2,:)).*x(2,:).*(1-x(3,:).^2)) ((x(1,:)-1).*x(1,:).*(1+2*x(2,:)).*(1-x(3,:).^2)) ((x(1,:)-1).*x(1,:).*(1+x(2,:)).*x(2,:).*(-2*x(3,:)))]/4; ...
                [((-2*x(1,:)).*(1+x(2,:)).*x(2,:).*(1-x(3,:).^2)) ((1-x(1,:).^2).*(1+2*x(2,:)).*(1-x(3,:).^2)) ((1-x(1,:).^2).*(1+x(2,:)).*x(2,:).*(-2*x(3,:)))]/2; ...
                [((1+2*x(1,:)).*(1+x(2,:)).*x(2,:).*(1-x(3,:).^2)) ((1+x(1,:)).*x(1,:).*(1+2*x(2,:)).*(1-x(3,:).^2)) ((1+x(1,:)).*x(1,:).*(1+x(2,:)).*x(2,:).*(-2*x(3,:)))]/4; ...
                [((2*x(1,:)-1).*(x(2,:)-1).*x(2,:).*(1+x(3,:)).*x(3,:)) ((x(1,:)-1).*x(1,:).*(2*x(2,:)-1).*(1+x(3,:)).*x(3,:)) ((x(1,:)-1).*x(1,:).*(x(2,:)-1).*x(2,:).*(1+2*x(3,:)))]/8; ...
                [((-2*x(1,:)).*(x(2,:)-1).*x(2,:).*(1+x(3,:)).*x(3,:)) ((1-x(1,:).^2).*(2*x(2,:)-1).*(1+x(3,:)).*x(3,:)) ((1-x(1,:).^2).*(x(2,:)-1).*x(2,:).*(1+2*x(3,:)))]/4; ...
                [((1+2*x(1,:)).*(x(2,:)-1).*x(2,:).*(1+x(3,:)).*x(3,:)) ((1+x(1,:)).*x(1,:).*(2*x(2,:)-1).*(1+x(3,:)).*x(3,:)) ((1+x(1,:)).*x(1,:).*(x(2,:)-1).*x(2,:).*(1+2*x(3,:)))]/8; ...
                [((2*x(1,:)-1).*(1-x(2,:).^2).*(1+x(3,:)).*x(3,:)) ((x(1,:)-1).*x(1,:).*(-2*x(2,:)).*(1+x(3,:)).*x(3,:)) ((x(1,:)-1).*x(1,:).*(1-x(2,:).^2).*(1+2*x(3,:)))]/4; ...
                [((-2*x(1,:)).*(1-x(2,:).^2).*(1+x(3,:)).*x(3,:)) ((1-x(1,:).^2).*(-2*x(2,:)).*(1+x(3,:)).*x(3,:)) ((1-x(1,:).^2).*(1-x(2,:).^2).*(1+2*x(3,:)))]/2; ...
                [((1+2*x(1,:)).*(1-x(2,:).^2).*(1+x(3,:)).*x(3,:)) ((1+x(1,:)).*x(1,:).*(-2*x(2,:)).*(1+x(3,:)).*x(3,:)) ((1+x(1,:)).*x(1,:).*(1-x(2,:).^2).*(1+2*x(3,:)))]/4; ...
                [((2*x(1,:)-1).*(1+x(2,:)).*x(2,:).*(1+x(3,:)).*x(3,:)) ((x(1,:)-1).*x(1,:).*(1+2*x(2,:)).*(1+x(3,:)).*x(3,:)) ((x(1,:)-1).*x(1,:).*(1+x(2,:)).*x(2,:).*(1+2*x(3,:)))]/8; ...
                [((-2*x(1,:)).*(1+x(2,:)).*x(2,:).*(1+x(3,:)).*x(3,:)) ((1-x(1,:).^2).*(1+2*x(2,:)).*(1+x(3,:)).*x(3,:)) ((1-x(1,:).^2).*(1+x(2,:)).*x(2,:).*(1+2*x(3,:)))]/4; ...
                [((1+2*x(1,:)).*(1+x(2,:)).*x(2,:).*(1+x(3,:)).*x(3,:)) ((1+x(1,:)).*x(1,:).*(1+2*x(2,:)).*(1+x(3,:)).*x(3,:)) ((1+x(1,:)).*x(1,:).*(1+x(2,:)).*x(2,:).*(1+2*x(3,:)))]/8];
        end
    end
    
    methods(Static)
        function res = test_QuadraticBasisFun
            q = fem.HexahedronTriquadratic;
            res = fem.BaseFEM.test_BasisFun(q);
            
            % test for correct basis function values on nodes
            [X,Y,Z] = ndgrid(-1:1:1,-1:1:1,-1:1:1);
            p = [X(:) Y(:) Z(:)]';
            res = res && isequal(q.N(p),eye(27));
        end
        
        function generateN_dN
            % Little hack to generate the appropriate basis function
            % expressions
            N = {'(x(1,:)-1).*x(1,:)', '(1-x(1,:).^2)', '(1+x(1,:)).*x(1,:)'
                 '(x(2,:)-1).*x(2,:)', '(1-x(2,:).^2)', '(1+x(2,:)).*x(2,:)'
                 '(x(3,:)-1).*x(3,:)', '(1-x(3,:).^2)', '(1+x(3,:)).*x(3,:)'};

            dN = {'(2*x(1,:)-1)', '(-2*x(1,:))', '(1+2*x(1,:))'
                  '(2*x(2,:)-1)', '(-2*x(2,:))', '(1+2*x(2,:))'
                  '(2*x(3,:)-1)', '(-2*x(3,:))', '(1+2*x(3,:))'};

            [x,y,z] = ndgrid(1:3);
            idx = [x(:) y(:) z(:)]';
            fac = 2.^sum(idx ~= 2);
            s = '';
            ds = '';
            for k = 1:27
                s = [s sprintf('(%s .* %s .* %s)/%d; ... %%%d\n',N{1,idx(1,k)},N{2,idx(2,k)},N{3,idx(3,k)},fac(k),k)];%#ok
                dn1 = sprintf('(%s.*%s.*%s)',dN{1,idx(1,k)},N{2,idx(2,k)},N{3,idx(3,k)});
                dn2 = sprintf('(%s.*%s.*%s)',N{1,idx(1,k)},dN{2,idx(2,k)},N{3,idx(3,k)});
                dn3 = sprintf('(%s.*%s.*%s)',N{1,idx(1,k)},N{2,idx(2,k)},dN{3,idx(3,k)});
                ds = [ds sprintf('[%s %s %s]/%d; ...\n',dn1,dn2,dn3,fac(k))];%#ok
            end
            disp(s);
            disp(ds);
            N = eval(sprintf('@(x)[%s];',s(1:end-9)));
            gradN = eval(sprintf('@(x)[%s];',ds(1:end-6)));
            [x,y,z] = ndgrid(-1:1);
            pos = [x(:) y(:) z(:)]';
            sum(N(pos))
            sum(gradN(pos))
        end
    end
    
end

