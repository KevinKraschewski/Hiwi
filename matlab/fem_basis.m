
%% Grid: 
% +x2|  /+x3
%    | /
%    |/
%    0---> +x1
%
%% Cube indexing:
%  /7---8 1: (-1,-1,-1)
% 3-+-4/| 2: ( 1,-1,-1)
% | 5-+-6 3: (-1, 1,-1) 
% 1---2/  4: ( 1, 1,-1)
%         5: (-1,-1, 1)
%         6: ( 1,-1, 1)
%         7: (-1, 1, 1)
%         8: ( 1, 1, 1)


N = @(x)[   (1-x(1,:)).*(1-x(2,:)).*(1-x(3,:));... % 1
            (1+x(1,:)).*(1-x(2,:)).*(1-x(3,:));...
            (1-x(1,:)).*(1+x(2,:)).*(1-x(3,:));... % 3
            (1+x(1,:)).*(1+x(2,:)).*(1-x(3,:));...
            (1-x(1,:)).*(1-x(2,:)).*(1+x(3,:));... % 5
            (1+x(1,:)).*(1-x(2,:)).*(1+x(3,:));...
            (1-x(1,:)).*(1+x(2,:)).*(1+x(3,:));... % 7
            (1+x(1,:)).*(1+x(2,:)).*(1+x(3,:));]/8;

[X,Y,Z] = ndgrid(-1:2:1,-1:2:1,-1:2:1);
check = [X(:) Y(:) Z(:)]';
if ~isequal(N(check),eye(8))
    error('Basis function mismatch');
end

gradN = @(x)[-(1-x(2,:)).*(1-x(3,:)) -(1-x(1,:)).*(1-x(3,:)) -(1-x(1,:)).*(1-x(2,:));... % 1
            (1-x(2,:)).*(1-x(3,:)) -(1+x(1,:)).*(1-x(3,:)) -(1+x(1,:)).*(1-x(2,:));...
            -(1+x(2,:)).*(1-x(3,:)) (1-x(1,:)).*(1-x(3,:)) -(1-x(1,:)).*(1+x(2,:));... % 3
            (1+x(2,:)).*(1-x(3,:))  (1+x(1,:)).*(1-x(3,:)) -(1+x(1,:)).*(1+x(2,:));...
            -(1-x(2,:)).*(1+x(3,:)) -(1-x(1,:)).*(1+x(3,:)) (1-x(1,:)).*(1-x(2,:));... % 5
            (1-x(2,:)).*(1+x(3,:)) -(1+x(1,:)).*(1+x(3,:)) (1+x(1,:)).*(1-x(2,:));...
            -(1+x(2,:)).*(1+x(3,:)) (1-x(1,:)).*(1+x(3,:)) (1-x(1,:)).*(1+x(2,:));... % 7
            (1+x(2,:)).*(1+x(3,:))  (1+x(1,:)).*(1+x(3,:)) (1+x(1,:)).*(1+x(2,:))]/8;
        
